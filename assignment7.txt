1)
interface Animals
{
	void speak();
	void eat();
}

class Cat implements Animals
{
	public void speak()
	{
		System.out.println("I am a CAT");
	}

	public void eat()
	{
		
		System.out.println("cat eating food ");
	}
}


class Dog implements Animals
{
	public void speak()
	{
		System.out.println("I am a DOG");
	}
	public void eat()
	{
		System.out.println(" dog eating food ");
	}
}
class z1
{
	public static void main(String args[])
	{

		Dog d = new Dog();
		Cat c = new Cat();
		
		c.speak();
		c.eat();
		
		d.speak();
		d.eat();
	}
}
-------------------------------------------------------------
2)
abstract class Animals
{
	protected String color, breed, name;
	
	abstract void eat();
	void speak()
	{
		System.out.println(" I'm an Animal.");
		System.out.println("Name : " + name);
		System.out.println("Color : " + color);
		System.out.println("Breed : " + breed);
	}
}
class Cat extends Animals
{
	Cat(String color, String breed, String name)
	{
		this.color = color;
		this.breed = breed;
		this.name = name;
	}
	
	void eat()
	{
		System.out.println(" cat eating food ");
	}
}
class z2
{
	public static void main(String args[] )
	{
		Cat c = new Cat("Black","White Cat","kitty");
		c.eat();
		c.speak();
		System.out.println();
	}
}
--------------------------------------------------------------
3)
import java.util.Scanner;

class numbers
{
	private String a, b;
	private int n1,n2;
	
	void input()
	{
		Scanner sc = new Scanner(System.in);
		System.out.print("Enter the First value : ");
		a = sc.nextLine();
		System.out.print("Enter the Second value : ");
		b = sc.nextLine();
		
		n1 = Integer.parseInt(a);
		n2 = Integer.parseInt(b);
	}

	int max()
	{
		if(n1 > n2)
			return n1;
		
		else 
			return n2;
		}
	
	
}

class z3
{
	public static void main(String args[] )
	{
		numbers obj = new numbers();
		obj.input();
		System.out.println("Max : " + obj.max());
	}

}
